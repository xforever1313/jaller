@using Jaller.Contracts.Bulk
@*
//
// Jaller - An advanced IPFS Gateway
// Copyright (C) 2025 Seth Hendrick
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
*@
@inject HttpClient client;
@inject ILogger<BulkImporter> log;

<div class="col-md-6">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h2>Bulk Import Metadata</h2>
            <p>Use this to import someone else's Jaller configuration.</p>
        </div>
        <div class="panel-body">
            @if( this.uploading )
            {
                <p>Uploading...</p>
            }
            else
            {
                if( this.successMessage is null )
                {
                    <p>Select a file and upload it using the footer below.</p>
                }
                else
                {
                    <div class="alert alert-success">
                        @this.successMessage
                    </div>
                }

                if( this.warnings?.Any() ?? false )
                {
                    <div class="alert alert-warning">
                        <ul>
                            @foreach( string warning in this.warnings )
                            {
                                <li>@warning</li>
                            }
                        </ul>
                    </div>
                }

                if( errors?.Any() ?? false )
                {
                    <div class="alert alert-danger">
                        <ul>
                            @foreach( string error in this.errors )
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                }
            }
        </div>
        <div class="panel-footer">
            <span>
                <label for="bulkImporterOverwriteFilesCheckBox">
                    <InputCheckbox id="bulkImporterOverwriteFilesCheckBox"
                    @bind-Value="this.overwriteExistingFiles" />
                    Overwrite existing files.
                </label>
            </span>
            <span>
                <InputFile OnChange="LoadFiles" />
            </span>
            <span>
                <button type="button" class="btn btn-success" disabled="@(this.file is null)" @onclick="UploadClicked" >Upload</button>
            </span>
        </div>
    </div>
</div>

@code {
    private List<string>? warnings = null;
    private List<string>? errors = null;

    private bool uploading = false;

    private bool overwriteExistingFiles = false;

    private string? successMessage = null;

    private IBrowserFile? file = null;

    private void LoadFiles( InputFileChangeEventArgs e )
    {
        this.file = e.File;
    }

    private async Task UploadClicked()
    {
        if( this.file is null )
        {
            this.errors = new List<string>
            {
                "Please select a file to upload first!"
            };
            return;
        }

        string extension = Path.GetExtension(this.file.Name);

        if (extension.EqualsIgnoreCase(".xml") == false)
        {
            errors = new List<string>
            {
                $"File must be an XML file, got: {extension}"
            };
            return;
        }

        try
        {
            this.errors = null;
            this.warnings = null;

            this.uploading = true;
            using var request = new HttpRequestMessage(HttpMethod.Post, "/api/bulk/import.xml");

            using var content = new MultipartFormDataContent();
            using Stream stream = this.file.OpenReadStream();
            using var streamContent = new StreamContent(stream);
            content.Add(streamContent, "File", this.file.Name);

            using var overwriteContent = new StringContent(this.overwriteExistingFiles.ToString());
            content.Add(overwriteContent, "OverwriteExistingFiles");

            request.Content = content;

            HttpResponseMessage response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                ImportResult? result = await response.Content.ReadFromJsonAsync<ImportResult>();
                if (result is null)
                {
                    this.errors = new List<string>
                    {
                        "Could not parse result from server."
                    };
                }
                else
                {
                    bool noErrors = true;
                    if (result.Warnings?.Any() ?? false)
                    {
                        noErrors = false;
                        this.warnings = new List<string>(result.Warnings);
                    }

                    if (result.Errors?.Any() ?? false)
                    {
                        noErrors = false;
                        this.errors = new List<string>(result.Errors);
                    }

                    if (noErrors)
                    {
                        this.successMessage = "Bulk Upload Successful!";
                    }
                    else
                    {
                        this.successMessage = null;
                    }
                }
            }
            else
            {
                string message = await response.Content.ReadAsStringAsync();
                this.errors = new List<string>
                {
                    $"{response.StatusCode}: {message}"
                };
            }
        }
        finally
        {
            this.uploading = false;
        }
    }
}
