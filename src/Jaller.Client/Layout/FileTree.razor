@*
//
// Jaller - An advanced IPFS Gateway
// Copyright (C) 2025 Seth Hendrick
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
*@
@inject HttpClient httpClient;
@inject ILogger<FileTree> log;

@if( this.fileTree is null )
{
    <span>Loading Tree...</span>
}
else
{
    void ProcessNode( TreeNode nodeToProcess )
    {
        JallerFolderTreeContentsInfo folderInfo = nodeToProcess.FolderContents;

        <ul class="no-bullets">
            @foreach( JallerFolderInfo childFolderInfo in folderInfo.Folders ?? Array.Empty<JallerFolderInfo>() )
            {
                bool foundChildNode = nodeToProcess.ChildFolders.TryGetValue( childFolderInfo.Id, out TreeNode? childNode );

                int? nodeFolderId = folderInfo.FolderId;

                <li id="folder_@childFolderInfo.Id">
                    <a @onclick="async () => await this.ChildFolderLinkClicked( nodeFolderId, childFolderInfo.Id, childNode )">
                        @if( nodeToProcess.ChildFolders.ContainsKey( childFolderInfo.Id ) && nodeToProcess.ChildFolders[childFolderInfo.Id].IsOpen )
                        {
                            <i class="fa-solid fa-folder-open"></i> @childFolderInfo.Name
                        }
                        else
                        {
                            <i class="fa-solid fa-folder"></i> @childFolderInfo.Name
                        }
                    </a>

                    @if( foundChildNode && ( childNode is not null ) && childNode.IsOpen )
                    {
                        ProcessNode( childNode );
                    }
                </li>
            }

            @foreach( JallerFileTreeLeafInfo fileInfo in folderInfo.Files ?? Array.Empty<JallerFileTreeLeafInfo>() )
            {
                <li><i class="fa-solid fa-file"></i> <a href="/File?cid=@fileInfo.CidV1" target="_blank">@fileInfo.Name</a></li>
            }
        </ul>
    }

    ProcessNode( this.fileTree.Root );
}

@code {
    // ---------------- Fields ----------------

    private FileTreeModel? fileTree;

    // ---------------- Methods ----------------

    protected override async Task OnInitializedAsync()
    {
        JallerFolderTreeContentsInfo? rootFolder = await GetFolderContents(null);
        if (rootFolder is null )
        {
            this.log.LogCritical( "Can not get root directory, can not proceed." );
            return;
        }

        this.fileTree = new FileTreeModel( rootFolder );
    }

    private async Task<JallerFolderTreeContentsInfo?> GetFolderContents( int? folderId )
    {
        string folderUrl = folderId?.ToString() ?? "";

        HttpResponseMessage httpResponse = await this.httpClient.GetAsync($"/api/tree/contents/{folderUrl}");
        if( httpResponse.IsSuccessStatusCode )
        {
            JallerFolderTreeContentsInfo? folderContents = await httpResponse.Content.ReadFromJsonAsync<JallerFolderTreeContentsInfo>();
            if( folderContents is null )
            {
                this.log.LogError($"Could not convert folder ID '{folderId}' from JSON.");
            }

            return folderContents;
        }
        else
        {
            string errorString = await httpResponse.Content.ReadAsStringAsync();
            this.log.LogError(errorString);

            return null;
        }
    }


    /// <summary>
    /// Event that is called if a folder is opened.
    /// </summary>
    /// <param name="parentId">The parent folder ID of the clicked folder. Null if the parent folder is root.</param>
    /// <param name="folderId">The folder ID of the client folder.</param>
    /// <param name="folderNode">The tree node associaed with the folder ID, assuming it currently exists.</param>
    private async Task ChildFolderLinkClicked( int? parentId, int folderId, TreeNode? folderNode )
    {
        if( this.fileTree is null )
        {
            throw new InvalidOperationException( "File Tree was somehow null." );
        }

        JallerFolderTreeContentsInfo? folderContents;

        // If no folder no exists, assume it is not opened.
        bool isOpen = folderNode?.IsOpen ?? false;

        if( isOpen )
        {
            // If we are currently open, toggling means we want to close up the folder.
            // No sense in wasting network traffic asking for the current folder contents.
            folderContents = new JallerFolderTreeContentsInfo
            {
                Files = null,
                Folders = null,
                FolderId = folderId
            };
        }
        else
        {
            // If we are not currently open, we want to 
            folderContents = await GetFolderContents( folderId );
        }

        if( folderContents is not null )
        {
            if( this.fileTree.ToggleDirectory( parentId, folderContents, ( isOpen == false ) ) == false )
            {
                this.log.LogError( $"Could not find parent directory {parentId} for folder {folderId}" );
            }
        }
    }
}
