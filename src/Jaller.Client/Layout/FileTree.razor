@*
//
// Jaller - An advanced IPFS Gateway
// Copyright (C) 2025 Seth Hendrick
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
*@
@inject HttpClient httpClient;
@inject ILogger<FileTree> log;

@if (this.fileTree is null)
{
    <span>Loading Tree...</span>
}
else
{
    var queue = new Queue<TreeNode>();
    queue.Enqueue(this.fileTree.Root);
    @while( queue.Any() )
    {
        TreeNode node = queue.Dequeue();
        foreach( TreeNode childNode in node.ChildFolders.Values )
        {
            queue.Enqueue( childNode );
        }

        JallerFolderTreeContentsInfo folderInfo = node.FolderContents;

        <ul class="no-bullets">
            @foreach( JallerFolderInfo childFolderInfo in folderInfo.Folders ?? Array.Empty<JallerFolderInfo>() )
            {
                int? parentFolderId = folderInfo.FolderId;

                <li id="folder_@childFolderInfo.Id">
                    <a href="#folder_@childFolderInfo.Id" @onclick="async () => await this.AddChild( parentFolderId, childFolderInfo.Id )">
                        @if (node.ChildFolders.ContainsKey(childFolderInfo.Id))
                        {
                            <i class="fa-solid fa-folder-open"></i> @childFolderInfo.Name
                        }
                        else
                        {
                            <i class="fa-solid fa-folder"></i> @childFolderInfo.Name
                        }
                    </a>
                </li>
            }

            @foreach (JallerFileTreeLeafInfo fileInfo in folderInfo?.Files ?? Array.Empty<JallerFileTreeLeafInfo>())
            {
                <li><i class="fa-solid fa-file"></i> <a href="/File?cid=@fileInfo.CidV1" target="_blank">@fileInfo.Name</a></li>
            }
        </ul>
    }
}

@code {
    // ---------------- Fields ----------------

    private FileTreeModel? fileTree;

    // ---------------- Methods ----------------

    protected override async Task OnInitializedAsync()
    {
        JallerFolderTreeContentsInfo? rootFolder = await GetFolderContents(null);
        if (rootFolder is null )
        {
            this.log.LogCritical( "Can not get root directory, can not proceed." );
            return;
        }

        this.fileTree = new FileTreeModel( rootFolder );
    }

    private async Task<JallerFolderTreeContentsInfo?> GetFolderContents( int? folderId )
    {
        string folderUrl = folderId?.ToString() ?? "";

        HttpResponseMessage httpResponse = await this.httpClient.GetAsync($"/api/tree/contents/{folderUrl}");
        if( httpResponse.IsSuccessStatusCode )
        {
            JallerFolderTreeContentsInfo? folderContents = await httpResponse.Content.ReadFromJsonAsync<JallerFolderTreeContentsInfo>();
            if( folderContents is null )
            {
                this.log.LogError($"Could not convert folder ID '{folderId}' from JSON.");
            }

            return folderContents;
        }
        else
        {
            string errorString = await httpResponse.Content.ReadAsStringAsync();
            this.log.LogError(errorString);

            return null;
        }
    }

    private async Task AddChild( int? parentId, int childId )
    {
        if( this.fileTree is null )
        {
            throw new InvalidOperationException("File Tree was somehow null.");
        }

        JallerFolderTreeContentsInfo? folderContents = await GetFolderContents(childId);
        if( folderContents is not null )
        {
            if( this.fileTree.AddDirectoryInfo(parentId, folderContents) == false )
            {
                this.log.LogError($"Could not find parent directory {parentId} for folder {childId}");
            }
        }
    }
}
